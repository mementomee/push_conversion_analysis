import os
import sys
# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É –¥–æ sys.path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, project_root)

import pandas as pd
from typing import List, Optional, Dict, Any
import logging
from src.database import PushDatabase
from config.constants import *

logger = logging.getLogger(__name__)

class DataLoader:
    """
    –ö–ª–∞—Å –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É push-—Å–ø–æ–≤—ñ—â–µ–Ω—å
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î PushDatabase –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö
    """
    
    def __init__(self, cache_enabled: bool = True):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º –∫–µ—à—É–≤–∞–Ω–Ω—è–º
        
        Args:
            cache_enabled: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–µ—à –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
        """
        self.db = PushDatabase(cache_enabled=cache_enabled)
        self.target_campaign_ids = None
        
    def load_push_data(self, 
                      start_date: str = PUSH_START_DATE,
                      end_date: str = PUSH_END_DATE,
                      ab_groups: List[str] = None,
                      countries: List[str] = None) -> pd.DataFrame:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        
        Args:
            start_date: –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ (YYYY-MM-DD)
            end_date: –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞ (YYYY-MM-DD)
            ab_groups: –§—ñ–ª—å—Ç—Ä –ø–æ A/B –≥—Ä—É–ø–∞—Ö
            countries: –§—ñ–ª—å—Ç—Ä –ø–æ –∫—Ä–∞—ó–Ω–∞—Ö
            
        Returns:
            DataFrame –∑ push-–¥–∞–Ω–∏–º–∏
        """
        logger.info(f"üì± –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è push-–¥–∞–Ω–∏—Ö: {start_date} - {end_date}")
        
        df = self.db.get_push_data(start_date, end_date, ab_groups, countries)
        
        if df.empty:
            logger.warning("‚ö†Ô∏è Push-–¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return df
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞
        df = self._process_push_data(df)
        
        logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} push-–∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {df['gadid'].nunique()} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        return df
    
    def load_conversion_data(self, 
                           start_date: str = CONVERSION_START_DATE,
                           end_date: str = CONVERSION_END_DATE,
                           campaign_ids: List[int] = None,
                           conversion_types: List[str] = ['deposit', 'registration']) -> pd.DataFrame:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó
        
        Args:
            start_date: –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞
            end_date: –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞
            campaign_ids: ID –∫–∞–º–ø–∞–Ω—ñ–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è —è–∫—â–æ None)
            conversion_types: –¢–∏–ø–∏ –∫–æ–Ω–≤–µ—Ä—Å—ñ–π
            
        Returns:
            DataFrame –∑ –∫–æ–Ω–≤–µ—Ä—Å—ñ—è–º–∏
        """
        logger.info(f"üí∞ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Å—ñ–π: {start_date} - {end_date}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞–º–ø–∞–Ω—ñ—ó —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ
        if campaign_ids is None:
            if self.target_campaign_ids is None:
                self.target_campaign_ids = self.find_campaign_groups()
            campaign_ids = self.target_campaign_ids
        
        df = self.db.get_conversion_data(start_date, end_date, campaign_ids, conversion_types)
        
        if df.empty:
            logger.warning("‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Å—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return df
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞
        df = self._process_conversion_data(df)
        
        logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∫–æ–Ω–≤–µ—Ä—Å—ñ–π –¥–ª—è {df['gadid'].nunique()} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        return df
    
    def find_campaign_groups(self, app_names: List[str] = TARGET_APPS) -> List[int]:
        """
        –ó–Ω–∞–π—Ç–∏ ID –∫–∞–º–ø–∞–Ω—ñ–π —Ü—ñ–ª—å–æ–≤–∏—Ö –∑–∞—Å—Ç–æ—Å—É–Ω–∫—ñ–≤
        
        Args:
            app_names: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—ñ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ ID –∫–∞–º–ø–∞–Ω—ñ–π
        """
        logger.info(f"üîç –ü–æ—à—É–∫ –∫–∞–º–ø–∞–Ω—ñ–π –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—ñ–≤: {app_names}")
        
        campaigns_df = self.db.get_campaign_info(app_names)
        
        if campaigns_df.empty:
            logger.warning("‚ö†Ô∏è –ö–∞–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return []
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó
        active_campaigns = campaigns_df[campaigns_df['state'] == 'active']
        campaign_ids = active_campaigns['id'].tolist()
        
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(campaign_ids)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π")
        logger.info(f"üìã –ö–∞–º–ø–∞–Ω—ñ—ó: {campaigns_df[['name', 'id', 'state']].to_dict('records')}")
        
        return campaign_ids
    
    def load_full_dataset(self, 
                         push_filters: Dict[str, Any] = None,
                         conversion_filters: Dict[str, Any] = None) -> tuple[pd.DataFrame, pd.DataFrame]:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        
        Args:
            push_filters: –§—ñ–ª—å—Ç—Ä–∏ –¥–ª—è push-–¥–∞–Ω–∏—Ö
            conversion_filters: –§—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å—ñ–π
            
        Returns:
            Tuple (push_df, conversions_df)
        """
        logger.info("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É –¥–∞–Ω–∏—Ö...")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        push_params = {
            'start_date': PUSH_START_DATE,
            'end_date': PUSH_END_DATE,
            'ab_groups': None,
            'countries': None
        }
        if push_filters:
            push_params.update(push_filters)
        
        conversion_params = {
            'start_date': CONVERSION_START_DATE,
            'end_date': CONVERSION_END_DATE,
            'campaign_ids': None,
            'conversion_types': ['deposit', 'registration']
        }
        if conversion_filters:
            conversion_params.update(conversion_filters)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
        push_df = self.load_push_data(**push_params)
        conversions_df = self.load_conversion_data(**conversion_params)
        
        return push_df, conversions_df
    
    def get_data_summary(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–∏—Ö
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        return self.db.get_push_performance_summary()
    
    def load_device_enrichment(self, gadids: List[str]) -> pd.DataFrame:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó
        
        Args:
            gadids: –°–ø–∏—Å–æ–∫ GADID
            
        Returns:
            DataFrame –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó
        """
        logger.info(f"üì± –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ {len(gadids)} –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤...")
        
        df = self.db.get_device_info(gadids)
        
        if not df.empty:
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ {len(df)} –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤")
        
        return df
    
    def _process_push_data(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ push-–¥–∞–Ω–∏—Ö
        
        Args:
            df: –°–∏—Ä—ñ push-–¥–∞–Ω—ñ
            
        Returns:
            –û–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏
        df['first_push'] = pd.to_datetime(df['first_push'])
        df['last_push'] = pd.to_datetime(df['last_push'])
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∫–∞–º–ø–∞–Ω—ñ—ó
        df['campaign_duration_hours'] = (
            df['last_push'] - df['first_push']
        ).dt.total_seconds() / 3600
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ push-—ñ–≤
        df['push_category'] = pd.cut(
            df['push_count'], 
            bins=[0, 1, 3, 5, 10, float('inf')],
            labels=['1', '2-3', '4-5', '6-10', '10+'],
            include_lowest=True
        )
        
        # –î–æ–¥–∞—î–º–æ tier –∫—Ä–∞—ó–Ω–∏
        df['tier'] = df['country'].apply(get_country_tier)
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        df = df[df['gadid'].notna() & (df['gadid'] != '')]
        df = df[df['ab_group'].notna()]
        df = df[df['push_count'] > 0]
        
        return df
    
    def _process_conversion_data(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ–π
        
        Args:
            df: –°–∏—Ä—ñ –¥–∞–Ω—ñ –∫–æ–Ω–≤–µ—Ä—Å—ñ–π
            
        Returns:
            –û–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏
        df['first_conversion'] = pd.to_datetime(df['first_conversion'])
        df['last_conversion'] = pd.to_datetime(df['last_conversion'])
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å—ñ–π
        df['conversion_window_hours'] = (
            df['last_conversion'] - df['first_conversion']
        ).dt.total_seconds() / 3600
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        df['user_type'] = 'No Conversion'
        df.loc[df['total_registrations'] > 0, 'user_type'] = 'Registration Only'
        df.loc[df['total_deposits'] > 0, 'user_type'] = 'Deposit'
        
        # ARPU —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
        df['arpu'] = df['total_revenue'] / df['conversion_events'].clip(lower=1)
        
        # –î–æ–¥–∞—î–º–æ tier –∫—Ä–∞—ó–Ω–∏
        df['tier'] = df['country'].apply(get_country_tier)
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        df = df[df['gadid'].notna() & (df['gadid'] != '')]
        
        return df
    
    def save_processed_data(self, 
                          push_df: pd.DataFrame, 
                          conversions_df: pd.DataFrame,
                          merged_df: pd.DataFrame = None) -> None:
        """
        –ó–±–µ—Ä–µ–≥—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        
        Args:
            push_df: Push-–¥–∞–Ω—ñ
            conversions_df: –ö–æ–Ω–≤–µ—Ä—Å—ñ—ó
            merged_df: –û–±'—î–¥–Ω–∞–Ω—ñ –¥–∞–Ω—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        """
        logger.info("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏
        os.makedirs('data/processed', exist_ok=True)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        push_df.to_parquet('data/processed/push_data.parquet')
        conversions_df.to_parquet('data/processed/conversion_data.parquet')
        
        if merged_df is not None:
            merged_df.to_parquet('data/processed/merged_data.parquet')
        
        logger.info("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ data/processed/")
    
    def load_processed_data(self) -> tuple[pd.DataFrame, pd.DataFrame, Optional[pd.DataFrame]]:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        
        Returns:
            Tuple (push_df, conversions_df, merged_df)
        """
        logger.info("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
        
        try:
            push_df = pd.read_parquet('data/processed/push_data.parquet')
            conversions_df = pd.read_parquet('data/processed/conversion_data.parquet')
            
            merged_df = None
            if os.path.exists('data/processed/merged_data.parquet'):
                merged_df = pd.read_parquet('data/processed/merged_data.parquet')
            
            logger.info("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
            return push_df, conversions_df, merged_df
            
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è –û–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return pd.DataFrame(), pd.DataFrame(), None
    
    def clear_cache(self):
        """–û—á–∏—â—É—î –∫–µ—à –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        self.db.clear_cache()
    
    def get_cache_info(self) -> Dict[str, Any]:
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–µ—à"""
        return self.db.get_cache_info()